#!/usr/bin/env bash

# Security: Enable strict error handling
set -euo pipefail

# Source security utilities
if [ -f "$(dirname "$0")/git_at_cmds/_security.sh" ]; then
    source "$(dirname "$0")/git_at_cmds/_security.sh"
fi

version() {
    echo "@ git plugin v1.0.1"
    echo
}

usage() {
    cat << EOF

Usage:
================================================================================
git @ <subcommand> [<options>]

Most subcommands have help @ git @ <subcommand> --help for more details.


Available Subcommands:
================================================================================

Informative Subcommands
-----------------------
changes (git @ changes)
    - Displays a list of files with any changes

hash (git @ hash)
    - Gets the hashes for remote and local branches
    - Compares the local and remote branches hashes

info (git @ info)
    - Shows the current values for many of the GitAT sub-commands

logs (git @ logs)
    - Show the last 10 lines of logs in pretty format



Branch Helper Subcommands
-------------------------
branch (git @ branch)

save
    - Same as running git add .; git commit -m; but also checks you're in
      the correct path.

wip
    - Set the current branch as a work in progress so that you can work on
      something else and come back to it later

work
    - Switch bewtween the set wip branch and master



Product Helper Subcommands
--------------------------
feature (git @ feature <options> [<feature>])
    - Sets and gets the feature you're working on in a branch

issue
    - Set the issue you're working on in the branch as part of the product workflow

product
    - Set and gets the product being worked on in this repo for use in
      simplyfying commit messages etc.

version
    - Manage versioning information

_id
    - Gets a string made up of the version, major, and minor versions

root
    - Runs: git stash push --include-untracked -m "switched-to-{branch}"
            git checkout {branch} # Set with git @ _trunk <branch>
            git pull --rebase
    NB. This does not reapply your stash

squash (git @ squash branch)
    - SOFT resets the commits of the current branch to the HEAD of the given BRANCH

_trunk (git @ _trunk [<branch>])
    - Holds/Sets the primary trunk (master|main|etc.) branch name

_label
    - A label in the format of [P.F.I] standing for Product, Feature, Issue

_path
    - Returns your local repo root path
EOF
}

main() {
    if [ "$#" -lt 1 ]; then
        usage; exit 1
    fi

    local subcommand="$1"; shift

    case $subcommand in
        "-h"|"--help")
            usage; exit 0
            ;;
        "-v"|"--version")
            version; exit 0
            ;;
        "-a"|"--all"|"a"|"all")
            "$0" info; exit 0
            ;;
    esac

    # Get the directory where this script is located
    SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
    
    # If this is a symbolic link, follow it to find the actual script location
    if [ -L "$0" ]; then
        SCRIPT_DIR="$(cd "$(dirname "$(readlink "$0")")" && pwd)"
    fi
    
    # Check if the subcommand file exists
    if [ ! -e "$SCRIPT_DIR/git_at_cmds/$subcommand.sh" ]; then
        git "$subcommand" "$@"; exit 1
    fi

    # Load the subcommand script
    source "$SCRIPT_DIR/git_at_cmds/$subcommand.sh"

    # Check if the function exists
    local cmdtype=$(type -t "cmd_$subcommand")
    if [ "$cmdtype" != "function" ]; then
        echo "Error: Function cmd_$subcommand not found in $SCRIPT_DIR/git_at_cmds/$subcommand.sh" >&2
        usage; exit 1
    fi

    # Call the function with all arguments
    cmd_"$subcommand" "$@"
}

main "$@"