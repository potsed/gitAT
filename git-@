#!/usr/bin/env sh

version() {
    echo "@ git plugin v0.1.0"
    echo
}

usage() {
    cat << 'EOF'

          __
       __/\ \__          __
   __ /\_\ \ ,_\        /'_`\_
 /'_ `\/\ \ \ \/       /'/'_` \
/\ \L\ \ \ \ \ \_     /\ \ \L\ \
\ \____ \ \_\ \__\    \ \ `\__,_\
 \/___L\ \/_/\/__/     \ `\_____\
   /\____/              `\/_____/
   \_/__/


Usage:
-------------------
git @ <subcommand> [<options>]

Most subcommands have help @ `git @ <subcommand> --help` for more details.

Available Subcommands:
-------------------
branch (git @ branch <options>)
    - Stores a handle to the current working branch for easy navigation
    - Cleans up completed and merged branches

changes (git @ changes)
    - Displays a list of files with any changes

feature (git @ feature <options> [<feature>])
    - Sets and gets the feature you're working on for a sprint

id
    - Gets a string made up of the version, major, and minor versions

info
    - Show the result of many of the `git @` commands in an info panel

label
    - A label in the format of (S.F.T) standing for Sprint, Feature, Task

lint
    - Set your linting tool, and run linting over your changed files only

logs
    - Show the last 10 lines of logs in pretty format

root
    - Returns the path to your project root

save
    - Same as running `git add .; git commit -m;` but also checks you're in
      the correct path.

scrub
    - Similar to lint, except this also runs the auto beautifier like phpcbf

sprint
    - set and get the sprint you're working on

start
    - Start a toggl timer

stop
    - Stop a toggl timer

tag
    - set the minor version og the code, this is not related to git tag

task
    - Set the task you're currently working on as part of the sprint workflow

toggl
    - Link to toggl timer

version
    - Show a version string vM.m.t

wip
    - Set the current branch as a work in progress so that you can work on
      something else and come back to it later

work
    - Switch to the current working branch

EOF
}

main() {
    if [ "$#" -lt 1 ]; then
        usage; exit 1
    fi

    local subcommand="$1"; shift

    case $subcommand in
        "-h"|"--help")
            usage; exit 0
            ;;
        "-v"|"--version")
            version; exit 0
            ;;
        "-a"|"--all"|"a"|"all")
            git @ info; exit 0
            ;;
    esac

    export WORKINGDIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
    if [ ! -e "$WORKINGDIR/git_at_cmds/$subcommand.sh" ]; then
        usage; exit 1
    fi

    source "$WORKINGDIR/git_at_cmds/$subcommand.sh"

    local cmdtype=`type -t "cmd_$subcommand"`
    if [ "$cmdtype" != "function" ]; then
        usage; exit 1
    fi

    cmd_$subcommand "$@"
}

main "$@"