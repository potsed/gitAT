#!/usr/bin/env sh

version() {
    echo "@ git plugin v1.0.1"
    echo
}

usage() {
    cat << EOF

Usage:
================================================================================
git @ <subcommand> <options>

Most subcommands have help using the --help flag

`git @ info`


Available Subcommands:
================================================================================

Informative Subcommands
-----------------------
changes
    - Displays a list of files with any changes

hash
    - Gets the hashes for remote and local branches
    - Compares the local and remote branches hashes

info
    - Shows the current values for many of the GitAT sub-commands

logs
    - Show the last 10 lines of logs in pretty format



Branch Helper Subcommands
-------------------------
branch

save
    - Shortcut for adding and commiting changes, also checks you're in
      the correct path.

wip
    - Set the current branch as a work in progress so that you can work on
      something else and come back to it later

work
    - Switch bewtween the set wip branch and master



Product Helper Subcommands
--------------------------
feature
    - Sets and gets the feature you're working on in a branch

issue
    - Set the issue you're working on in the branch as part of the product workflow

product
    - Set and gets the product being worked on in this repo for use in
      simplyfying commit messages etc.

version
    - Manage versioning information







_id
    - Gets a string made up of the version, major, and minor versions









root
    - Stashes, checks out trunk, pulls annd rebases trunk
    - NB. This does not reapply your stash





squash
    - SOFT resets the commits of the current branch to the HEAD of the given BRANCH







_trunk
    - Holds/Sets the primary trunk (master|main|etc.) branch name

_label
    - A label in the format of [P.F.I] standing for Product, Feature, Issue

_path
    - Returns your local repo root path

EOF
}

main() {
    if [ "$#" -lt 1 ]; then
        usage; exit 1
    fi

    local subcommand="$1"; shift

    case $subcommand in
        "-h"|"--help")
            usage; exit 0
            ;;
        "-v"|"--version")
            version; exit 0
            ;;
        "-a"|"--all"|"a"|"all")
            git @ info; exit 0
            ;;
    esac

    export WORKINGDIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
    if [ ! -e "$WORKINGDIR/git_at_cmds/$subcommand.sh" ]; then
        git $subcommand "$@"; exit 1
    fi

    source "$WORKINGDIR/git_at_cmds/$subcommand.sh"

    local cmdtype=`type -t "cmd_$subcommand"`
    if [ "$cmdtype" != "function" ]; then
        usage; exit 1
    fi

    cmd_$subcommand "$@"
}

main "$@"